# üîç Exploiting an API Endpoint Using Documentation

Welcome to my guide on solving the **"Exploiting an API endpoint using documentation"** lab from PortSwigger Academy. In this guide, we will explore how to identify, analyze, and exploit API endpoints effectively using available documentation.

![Lab Difficulty](https://img.shields.io/badge/Difficulty-%E2%98%85%E2%98%86%E2%98%86%E2%98%86%E2%98%86-lightgrey)

---

## üìë Table of Contents

- [Overview](#overview)
- [Background](#background)
- [Enumeration](#enumeration)
- [Exploitation](#exploitation)
- [Conclusion](#conclusion)

---

## üìù Overview

This lab demonstrates how to leverage API documentation to exploit an API endpoint.

**Key Objective:** Exploit an API endpoint to delete the `carlos` user account.

**Difficulty Level (1-10):** ‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ‚òÜ‚òÜ‚òÜ‚òÜ‚òÜ

Let‚Äôs dive in and solve this step by step!

---

## üõ† Background

To complete this lab, follow these prerequisites:

1. Log in using the following credentials:
   - Username: `wiener`
   - Password: `peter`

2. Identify API documentation to locate exploitable endpoints.

---

## üîç Enumeration

### 1Ô∏è‚É£ Access the Application

Navigate to the homepage and log in using the provided credentials:

```
Username: wiener
Password: peter
```

Once logged in, inspect the functionality to update the user‚Äôs email address.

### 2Ô∏è‚É£ Capture HTTP Requests

Using Burp Suite, intercept the HTTP request generated when updating the email. This reveals the structure of the API:

```http
PATCH /api/user/wiener HTTP/1.1
Host: your-lab-url
Content-Type: application/json

{
  "email": "newemail@example.com"
}
```

The endpoint `/api/user/<username>` is used for modifying user data. Let‚Äôs enumerate further!

### 3Ô∏è‚É£ Discover API Documentation

By sending a GET request to `/api`, we can enumerate API documentation. Use Burp Suite Repeater or any HTTP client like cURL:

```http
GET /api HTTP/1.1
Host: your-lab-url
```

This returns a structured API response or links to documentation, detailing available endpoints:

| Method | Endpoint              | Parameters         | Response         |
|--------|-----------------------|--------------------|------------------|
| GET    | /user/[username]      | None               | 200 OK, User     |
| DELETE | /user/[username]      | None               | 200 OK, Success  |
| PATCH  | /user/[username]      | {"email": String} | 200 OK, User     |

The `DELETE` method is particularly interesting, as it allows deleting a user without requiring additional permissions.

---

## üß™ Exploitation

### Step 1Ô∏è‚É£: Identify the Target

Our goal is to delete the `carlos` user account. Based on the documentation, we can achieve this by sending a DELETE request to the `/user/carlos` endpoint.

### Step 2Ô∏è‚É£: Send the Exploit

Using Burp Suite or any HTTP client, craft the following DELETE request:

```http
DELETE /api/user/carlos HTTP/1.1
Host: your-lab-url
```

### Step 3Ô∏è‚É£: Verify Deletion

If successful, the server will respond with `200 OK`, and the `carlos` account will no longer exist.

---

## üìå Conclusion

In this lab, we successfully:

- Identified and analyzed API endpoints using documentation.
- Exploited the `DELETE` method to delete a user account without proper access controls.

### ‚ú® Key Takeaways

1. Always enumerate API endpoints thoroughly.
2. Understand the functionality of HTTP methods (GET, POST, DELETE, PATCH, etc.).
3. Check for insufficient access controls in API implementations.

Thanks for reading! I hope this guide was helpful. Feel free to share your thoughts or improvements. Happy learning! üöÄ

